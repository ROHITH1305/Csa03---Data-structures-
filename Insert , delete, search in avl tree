class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None
    
    def height(self, node):
        if node is None:
            return 0
        return node.height
    
    def update_height(self, node):
        if node is None:
            return
        node.height = 1 + max(self.height(node.left), self.height(node.right))
    
    def balance_factor(self, node):
        if node is None:
            return 0
        return self.height(node.left) - self.height(node.right)
    
    def rotate_left(self, y):
        x = y.right
        T2 = x.left

        x.left = y
        y.right = T2

        self.update_height(y)
        self.update_height(x)

        return x

    def rotate_right(self, x):
        y = x.left
        T2 = y.right

        y.right = x
        x.left = T2

        self.update_height(x)
        self.update_height(y)

        return y
    
    def insert(self, root, key):
        if root is None:
            return Node(key)
        
        if key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)
        
        self.update_height(root)
        balance = self.balance_factor(root)
        
        if balance > 1:
            if key < root.left.key:
                return self.rotate_right(root)
            else:
                root.left = self.rotate_left(root.left)
                return self.rotate_right(root)
        
        if balance < -1:
            if key > root.right.key:
                return self.rotate_left(root)
            else:
                root.right = self.rotate_right(root.right)
                return self.rotate_left(root)
        
        return root
    
    def delete(self, root, key):
        # Implement AVL tree deletion here
    
    def search(self, root, key):
        if root is None or root.key == key:
            return root
        
        if key < root.key:
            return self.search(root.left, key)
        else:
            return self.search(root.right, key)
    
    def insert_key(self, key):
        self.root = self.insert(self.root, key)
    
    def delete_key(self, key):
        self.root = self.delete(self.root, key)
    
    def search_key(self, key):
        return self.search(self.root, key)
